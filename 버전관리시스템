버전 관리 시스템

버전 관리 시스템: 파일의 "버전"을 관리하는 소프트웨어
                  파일의 모든 변경 사항이 history를 저장한다.
사용목적: 변경된 내역을 추적해서 문제해결을 하기 위해
          효과적인 협업을 하기 위해

버전 관리 시스템 좋은점
1.변경 내용 추적(누가 무엇을 언제 왜 변경 or 특정 두 시점의 파일간의 차이점 비교)
2.과거 특정 시점의 상태로 복원
3.예기치 못한 사고에 대비한 백업
4.효과적인 협업(모든 변경 history를 모든 참여자와 공유)

로컬 버전관리시스템: local machine에만 변경 history를 기록, 협업x
중앙집중식 버전관리시스템: 모든 파일과 histroy를 저장하는 하나의 저장소와 서버, 협업o
                           단점: 서버가 다운or 네트웍이 끊기면 작업 불가, 서버가 문제가 생기면 다 날라감
분산 버전관리시스템:모든 클라이언트 들이 서버의 저장소의 복사본을 가지고 있음(로컬 저장소)
                    서버는 클라이언트 간의 동기화 밑 협업을 지원(원격 저장소)
                    장점:서버가 다운되거나 네트웍이 끊겨도 작업가능, 서버에 문제가 생겨도 복구쉬움

git
목표:빠른속도,단순한 구조, 비선형적 개발(branch),완벽한 분산,리눅스 커널 같은 대형 프로젝트 유용(속도and데이터 크기)
특징:델타가 아니라 스냅샷이다.
델타:각 파일의 변화(델타)를 저장, 가장 최신 상태를 가져올 때는 원본부터 모든 델타를 다 더함, history가 쌓일 수록, 최신 코드를 가져올 때 시간이 걸림
스냅샷:변경된 파일의 스냅샷만 저장, 변경되지 않은 파일은 이전 스냅샷에 대한 링크만 저장
       적절한 시점에 garbage collction이 실행되어 가장 최신 파일의 스냅샷과 그것으로 부터 델타로 이전 history변환
       효율적으로 저장공간을 사용, 빠른 속도로 코드를 가져오는 것이 가능

git의 특성
명령이 매우 빠르게 실행(로컬에서 history조회,과거 버전의 파일과 비교도 로컬,네트웤에 영향x)
기차나 비행기에서도 작업이 가능하다.
key-value데이터 저장소이다.
branch가 빠르고 가볍다.

branch란: 원래 코드에 영향을 주지않고 독립적으로 개발하는 공간
          여러 개발자들이 동시에 다양한 작업이 가능하고, 원래 코드의 일종의 복사본에서 개발진행(실제로 복사안할수도 있음)
왜 쓰냐?:실험적인 기능 구현, 급한 버그해결, 다음 버전 릴리즈 준비

branch에 단점: 복사하면 저장공간이 필요하고 오래걸린다. 하지만 git은 포인터에 불과하다.
